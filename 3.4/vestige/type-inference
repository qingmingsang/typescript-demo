//类型推断

//在TypeScript中，有几个地方使用类型推断来在没有显式类型注释时提供类型信息。
//例如，在此代码中
let x = 3;
//x推断变量的类型number。在初始化变量和成员，设置参数默认值以及确定函数返回类型时会发生这种推断。
//在大多数情况下，类型推断很简单。在以下部分中，我们将探讨如何推断类型的一些细微差别。


//最佳公共类型

//当从几个表达式进行类型推断时，这些表达式的类型用于计算“最佳公共类型”。

//例如，
let x2 = [0, 1, null];
//要推断x上面示例中的类型，我们必须考虑每个数组元素的类型。
//这里我们给出了数组类型的两种选择：number和null。
//最常见的类型算法考虑每种候选类型，并选择与所有其他候选者兼容的类型。

//因为必须从提供的候选类型中选择最佳公共类型，所以在某些情况下类型共享公共结构，
//但没有一种类型是所有候选类型的超类型。

//例如：
//let zoo = [new Rhino(), new Elephant(), new Snake()];
//理想情况下，我们可能希望zoo将其推断为a Animal[]，但由于Animal数组中没有严格类型的对象，
//因此我们不会对数组元素类型进行推断。
//要纠正这一点，请在没有任何类型是所有其他候选者的超类型时明确提供类型：

//let zoo2: Animal[] = [new Rhino(), new Elephant(), new Snake()];
//如果找不到最佳公共类型，则生成的推断是union数组类型(Rhino | Elephant | Snake)[]。

//上下文类型
//在TypeScript中，类型推断在某些情况下也适用于“另一个方向”。
//这被称为“上下文类型”。当表达式的类型由其位置隐含时，就会发生上下文类型。

//例如：
window.onmousedown = function (mouseEvent) {
  console.log(mouseEvent.button);   //<- OK
  //console.log(mouseEvent.kangaroo); //<- Error!
};
//这里，Typescript类型检查器使用Window.onmousedown函数的类型来推断赋值右侧的函数表达式的类型。
//当它这样做，它能够推断出类型的的mouseEvent参数，它确实包含一个button属性，但不是kangaroo属性。

//Typescript足够智能，可以推断其他环境中的事物类型：
window.onscroll = function (uiEvent) {
  //console.log(uiEvent.button); //<- Error!
}
//基于上面的函数被赋值的事实Window.onscroll，Typescript知道它uiEvent是一个UIEvent，
//而不是像上一个例子那样的MouseEvent。UIEvent对象不包含任何button属性，因此Typescript将抛出错误。

//如果此函数不在上下文类型的位置，函数的参数将隐式具有类型any，
//并且不会发出错误（除非您使用该--noImplicitAny选项）：

const handler = function (uiEvent) {
  console.log(uiEvent.button); //<- OK
}
//我们还可以显式地为函数的参数提供类型信息，以覆盖任何上下文类型：

window.onscroll = function (uiEvent: any) {
  console.log(uiEvent.button);  //<- Now, no error is given
};
//但是，此代码将记录undefined，因为uiEvent没有调用属性button。

//在许多情况下，上下文类型适用。常见情况包括函数调用的参数，赋值的右侧，类型断言，
//对象和数组文字的成员以及返回语句。

//上下文类型还充当最佳常见类型的候选类型。例如：
//function createZoo(): Animal[] {
//  return [new Rhino(), new Elephant(), new Snake()];
//}
//在这个例子中，最常见的类型有一组的四名候选人：Animal，Rhino，Elephant，和Snake。
//其中，Animal可以通过最佳通用类型算法进行选择。

